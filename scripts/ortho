#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
from fontTools.ttLib import TTFont
from jkUnicode import UniInfo
from jkUnicode.fonttools.sfnt import get_cmap
from jkUnicode.orthography import OrthographyInfo


class OrthoCmdLine(object):
	def __init__(self, font_path, args):
		self.o = OrthographyInfo()
		self.u = UniInfo(0)
		self.o.cmap = self.get_cmap(font_path)
		if args.punctuation:
			self.o.report_missing_punctuation()
		elif args.near_miss:
			self.o.report_near_misses(args.near_miss[0])
		elif args.full_only:
			self.o.report_supported(full_only=True)
		else:
			self.o.report_supported(full_only=False)
	
	
	def get_cmap(self, f):
		# Get a cmap from a given font path
		f = TTFont(font_path)
		cmap = get_cmap(f)
		f.close()
		return cmap


if __name__ == "__main__":
	parser = argparse.ArgumentParser(description="Query fonts about orthographic support.")
	parser.add_argument('-f', '--full-only', action="store_true", default=False, help='Report only orthographies that are supported with all optional characters')
	parser.add_argument('-p', '--punctuation', action="store_true", default=False, help='Report missing punctuation for otherwise supported orthographies')
	parser.add_argument('-n', '--near-miss', type=int, nargs=1, help='Report almost supported orthographies with maximum number of missing characters')
	#parser.add_argument('-2', '--woff2',  action="store_true", default=False, help='Include WOFF2')
	#parser.add_argument('-t', '--ttf',    action="store_true", default=False, help='Include TTF')
	#parser.add_argument('-s', '--svg',    action="store_true", default=False, help='Include SVG')
	#parser.add_argument('-i', '--inline', action="store_true", default=False, help='Store fonts inside the HTML file (except EOT and SVG)')
	#parser.add_argument('--html', nargs=1, default=["main"], help='Use the speficied HTML template')
	parser.add_argument('font', type=str, nargs="+", help='One or more fonts')
	
	args = parser.parse_args()
	
	for font_path in args.font:
		OrthoCmdLine(font_path, args)
